stages:
  - lint
  - build
  - test
  - registry

.in-gradle-environment:
  image: gradle:6.7.0-jdk15
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  tags:
    - docker

.in-rust-environment:
  image: rustlang/rust:nightly
  before_script:
    - rustc --version
    - cargo --version
    - rustup --version
    - rustup component add llvm-tools-preview
  tags:
    - docker

lint:linker:
  stage: lint
  extends:
    - .in-gradle-environment
  script:
    - gradle detekt
  interruptible: true

build:cli:
  stage: build
  extends:
    - .in-gradle-environment
  script:
    - gradle --build-cache cli:assemble cli:shadowJar
  interruptible: true
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - .gradle
      - build
      - cli/build
  artifacts:
    paths:
      - cli/build/libs/*.jar

build:app:
  stage: build
  extends:
    - .in-rust-environment
  script: |
    cd app && cargo build --verbose
  artifacts:
    paths:
      - ./app/target
    expire_in: 2 hours

test:cli:
  stage: test
  extends:
    - .in-gradle-environment
  script:
    - gradle cli:test cli:printCoverage
  coverage: '/^Coverage:\s*?(\d+(?:\.\d+)?)%/'
  interruptible: true
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - build
      - cli/build

test:app:
  stage: test
  extends:
    - .in-rust-environment
  script: |
    cd app && cargo test --verbose
  needs:
    - build:app

registry:cli:
  stage: registry
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - mkdir -p /root/.docker
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - echo "${DOCKER_HUB_REGISTRY_PASSWORD}" | docker login -u "${DOCKER_HUB_REGISTRY_USER}" --password-stdin "${DOCKER_HUB_REGISTRY}"
  script: |
    docker pull "${CI_REGISTRY_IMAGE}:latest" || true
    docker build --cache-from "${CI_REGISTRY_IMAGE}:latest" --tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" .
    docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}:latest"
    docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${DOCKER_HUB_REGISTRY_IMAGE}:latest"
    docker push "${CI_REGISTRY_IMAGE}:latest"
    docker push "${DOCKER_HUB_REGISTRY_IMAGE}:latest"
    if [ -n "${CI_COMMIT_TAG}" ]; then
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      docker tag "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${DOCKER_HUB_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      docker push "${DOCKER_HUB_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    fi;
  after_script:
    - docker logout "${CI_REGISTRY}"
    - docker logout "${DOCKER_HUB_REGISTRY}"
    - rm -rf /root/.docker
  only:
    - main
  dependencies:
    - build:cli
  tags:
    - docker-cli
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
